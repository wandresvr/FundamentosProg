Python is a good general language, though you haven't seen stubbornness until you have to convince a physics professor to switch from using Fortran. It could be that most are switching and thus contributing to Python's growing scientific community, but I also think it has a lot to do with legacy code. Python is great as "glue code" or "wrapper code"--in fact, most of the NumPy library includes wrappers for BLAS, LAPACK, and similar old but extremely fast libraries that were written in FORTRAN back in the 90s. SciPy includes similar routines for optimization (it is a superset of NumPy). So you don't want to throw away all this hard work (and it would be an enormous effort to redo it, without any benefits really). What you do is just glue it together with some nice interfaces to get something that isn't a complete nightmare.

And as Daniel also mentioned, it can be parallelized with MPI and CUDA, using the multiprocessing lib, or threading (this is a bit tricky though because of the GIL, see http://stackoverflow.com/questio...).

As far as Python vs. MATLAB, you can find some questions on Quora where people have described the pros and cons of each [*], but basically they are roughly similar tools for most people, though MATLAB has many more toolboxes and such, and of course Python's libraries aren't always the most up-to-date since it's open source. But this goes sorta both ways--anyone can contribute something new they've done if they put in a little effort.

One last reason why Python is so good for scientific computing: it's easy to program in. At worst, it's a good language for writing prototypes, which you can do very quickly and you free your mind up to think of better ways to structure your code. Then you can profile and decide whether you truly need something written in C++, or if you can get away with writing a few routines in C/C++ to make your code faster. For scientific computing, it seems to happen a lot that there are a few routines that need to be really fast that affect the overall complexity of the method (e.g. a loop over entire simulation time, which is large compared to other things the software might be doing), so you don't have to do extra work of creating the entire software in C++, just the bits you need. If you've ever tried to write some big piece of software in C++, you will immediately see the benefits of this. For scientists who are doing science and don't have enough time to be writing software, this is great for them. And it's better than Fortran because, if you wanted or had the time, it would not be difficult to improve your code in a meaningful way if you happened to (for example) get a nice CS undergrad to come work for your lab.

It's an interesting point to talk about attracting students. If I were thinking about joining a physics group, the first thing I would think about is how modern their software tools are. Do they know about Git, Python, and new parallel processing tools? I'm not saying they need to all be using Eclipse and be coding in Java, but if they haven't moved beyond Fortran, no way, and I'm a physics student. I'm sure many physics labs would be grateful to have some CS eyes on their code, because good code in science is critical. It reduces your mistakes (HUGE THING!!), allows you to extend your code more easily (another huge thing because it always happens!), and you're less likely to feel awkward or weird about sharing your code because it's nice and could even be helpful to other scientists if they need to do similar things.